{"version":3,"file":"ac13f81adfa8a09adb5b4b8e0c148ddca20d3402-1d3134fe99c8b156e862.js","mappings":"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","sources":["webpack://hoogenbos.ch/./node_modules/camelcase/index.js","webpack://hoogenbos.ch/./node_modules/classnames/index.js","webpack://hoogenbos.ch/./node_modules/gatsby-plugin-gtag/index.js","webpack://hoogenbos.ch/../src/image-utils.ts","webpack://hoogenbos.ch/../src/components/hooks.ts","webpack://hoogenbos.ch/../src/components/picture.tsx","webpack://hoogenbos.ch/../src/components/layout-wrapper.tsx","webpack://hoogenbos.ch/../src/components/placeholder.tsx","webpack://hoogenbos.ch/../src/components/main-image.tsx","webpack://hoogenbos.ch/../src/components/gatsby-image.browser.tsx","webpack://hoogenbos.ch/../src/components/gatsby-image.server.tsx","webpack://hoogenbos.ch/../src/components/static-image.server.tsx","webpack://hoogenbos.ch/../src/components/static-image.tsx","webpack://hoogenbos.ch/./src/components/Footer/Footer.tsx","webpack://hoogenbos.ch/./src/components/Profile.tsx","webpack://hoogenbos.ch/./src/components/Seo.tsx","webpack://hoogenbos.ch/./src/components/Icon/Icon.tsx","webpack://hoogenbos.ch/./src/components/Socials/Socials.tsx","webpack://hoogenbos.ch/./src/img/github.svg","webpack://hoogenbos.ch/./src/img/linkedin.svg","webpack://hoogenbos.ch/./src/img/twitter.svg"],"sourcesContent":["'use strict';\n\nvar preserveCamelCase = function preserveCamelCase(string) {\n  var isLastCharLower = false;\n  var isLastCharUpper = false;\n  var isLastLastCharUpper = false;\n  for (var i = 0; i < string.length; i++) {\n    var character = string[i];\n    if (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {\n      string = string.slice(0, i) + '-' + string.slice(i);\n      isLastCharLower = false;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = true;\n      i++;\n    } else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {\n      string = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = false;\n      isLastCharLower = true;\n    } else {\n      isLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n    }\n  }\n  return string;\n};\nvar camelCase = function camelCase(input, options) {\n  if (!(typeof input === 'string' || Array.isArray(input))) {\n    throw new TypeError('Expected the input to be `string | string[]`');\n  }\n  options = Object.assign({\n    pascalCase: false\n  }, options);\n  var postProcess = function postProcess(x) {\n    return options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n  };\n  if (Array.isArray(input)) {\n    input = input.map(function (x) {\n      return x.trim();\n    }).filter(function (x) {\n      return x.length;\n    }).join('-');\n  } else {\n    input = input.trim();\n  }\n  if (input.length === 0) {\n    return '';\n  }\n  if (input.length === 1) {\n    return options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n  }\n  var hasUpperCase = input !== input.toLowerCase();\n  if (hasUpperCase) {\n    input = preserveCamelCase(input);\n  }\n  input = input.replace(/^[_.\\- ]+/, '').toLowerCase().replace(/[_.\\- ]+(\\w|$)/g, function (_, p1) {\n    return p1.toUpperCase();\n  }).replace(/\\d+(\\w|$)/g, function (m) {\n    return m.toUpperCase();\n  });\n  return postProcess(input);\n};\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;","/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n  'use strict';\n\n  var hasOwn = {}.hasOwnProperty;\n  var nativeCodeString = '[native code]';\n  function classNames() {\n    var classes = [];\n    for (var i = 0; i < arguments.length; i++) {\n      var arg = arguments[i];\n      if (!arg) continue;\n      var argType = typeof arg;\n      if (argType === 'string' || argType === 'number') {\n        classes.push(arg);\n      } else if (Array.isArray(arg)) {\n        if (arg.length) {\n          var inner = classNames.apply(null, arg);\n          if (inner) {\n            classes.push(inner);\n          }\n        }\n      } else if (argType === 'object') {\n        if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\n          classes.push(arg.toString());\n          continue;\n        }\n        for (var key in arg) {\n          if (hasOwn.call(arg, key) && arg[key]) {\n            classes.push(key);\n          }\n        }\n      }\n    }\n    return classes.join(' ');\n  }\n  if (typeof module !== 'undefined' && module.exports) {\n    classNames.default = classNames;\n    module.exports = classNames;\n  } else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n    // register as 'classnames', consistent with npm package name\n    define('classnames', [], function () {\n      return classNames;\n    });\n  } else {\n    window.classNames = classNames;\n  }\n})();","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OutboundLink = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**\n                                                                                                                                                                                                                                                                   * Code from OutboundLink module in gatsby-plugin-google-analytics\n                                                                                                                                                                                                                                                                   * modified for gtag\n                                                                                                                                                                                                                                                                   */\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction OutboundLink(props) {\n  return _react2.default.createElement('a', _extends({}, props, {\n    onClick: function onClick(e) {\n      if (typeof props.onClick === 'function') {\n        props.onClick();\n      }\n      var redirect = true;\n      if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey || e.shiftKey || e.defaultPrevented) {\n        redirect = false;\n      }\n      if (props.target && props.target.toLowerCase() !== '_self') {\n        redirect = false;\n      }\n\n      if (window.gtag) {\n        window.gtag('event', 'click', {\n          event_category: 'outbound',\n          event_label: props.href,\n          transport_type: 'beacon',\n          event_callback: function event_callback() {\n            if (redirect) {\n              document.location = props.href;\n            }\n          }\n        });\n      } else {\n        if (redirect) {\n          document.location = props.href;\n        }\n      }\n\n      return false;\n    }\n  }));\n}\n\nOutboundLink.propTypes = {\n  href: _propTypes2.default.string,\n  target: _propTypes2.default.string,\n  onClick: _propTypes2.default.func\n};\n\nexports.OutboundLink = OutboundLink;","import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  outputPixelDensities?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Partial<Node> & {\n  childImageSharp?: IGatsbyImageDataParent<Partial<Node>>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (\n  node: ImageDataLike | null\n): IGatsbyImageData | undefined => {\n  // This checks both for gatsbyImageData and gatsbyImage\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { Fragment, FunctionComponent } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<ILayoutWrapperProps> =\n  function LayoutWrapper({ children, ...props }) {\n    return (\n      <Fragment>\n        <Sizer {...props} />\n        {children}\n\n        {SERVER ? <NativeScriptLoading /> : null}\n      </Fragment>\n    )\n  }\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        onStartLoad?.({\n          wasCached: true,\n        })\n\n        ssrImage.addEventListener(`load`, function onLoadListener() {\n          ssrImage.removeEventListener(`load`, onLoadListener)\n\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        if (!root.current) {\n          return\n        }\n\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    breakpoints,\n    outputPixelDensities,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import React from 'react';\nimport Socials from '../Socials';\nimport Link from 'gatsby-link';\n\nexport default function Footer() {\n    return (\n        <footer className=\"flex flex-col-reverse items-center justify-between sm:flex-row\">\n            <div>\n                &copy; {new Date().getFullYear()}{' '}\n                <Link to=\"/\" className=\"hover:underline\">\n                    Max Hoogenbosch\n                </Link>\n            </div>\n            <Socials />\n        </footer>\n    );\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { graphql } from 'gatsby';\n\nexport default function Profile({ image, className }) {\n    return (\n        <div\n            className={classNames(\n                className,\n                'overflow-hidden rounded-full shadow-md',\n            )}\n        >\n            {image}\n        </div>\n    );\n}\n\nexport const query = graphql`\n    fragment SmallProfileImage on File {\n        childImageSharp {\n            gatsbyImageData(layout: CONSTRAINED, width: 100)\n        }\n    }\n\n    fragment LargeProfileImage on File {\n        childImageSharp {\n            gatsbyImageData(layout: CONSTRAINED, width: 200)\n        }\n    }\n`;\n","import React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useLocation } from '@reach/router';\nimport { graphql, useStaticQuery } from 'gatsby';\n\ninterface Props {\n    title?: string;\n    description?: string;\n    image?: string;\n    article?: boolean;\n    published?: string;\n    tags?: string[];\n}\n\nexport default function Seo({\n    title,\n    description,\n    image,\n    article,\n    published,\n    tags,\n}: Props) {\n    const { pathname } = useLocation();\n    const { site } = useStaticQuery(query);\n\n    const {\n        defaultTitle,\n        titleTemplate,\n        defaultDescription,\n        siteUrl,\n        twitterUsername,\n        locale,\n        lang,\n    } = site.siteMetadata;\n\n    const seo = {\n        title: title || defaultTitle,\n        description: description || defaultDescription,\n        image: image && `${siteUrl}${image}`,\n        url: `${siteUrl}${pathname}`,\n    };\n\n    return (\n        <Helmet\n            title={title}\n            titleTemplate={titleTemplate}\n            defaultTitle={defaultTitle}\n        >\n            <html lang={lang} />\n            <meta charSet=\"utf-8\" />\n            {/* Primary tags */}\n            <meta name=\"title\" content={seo.title} />\n            <meta name=\"description\" content={seo.description} />\n            <link rel=\"canonical\" href={seo.url} />\n            {seo.image && <meta name=\"image\" content={seo.image} />}\n            {/* Open Graph / Facebook */}\n            <meta property=\"og:url\" content={seo.url} />\n            <meta property=\"og:locale\" content={locale} />\n            <meta property=\"og:site_name\" content={defaultTitle} />\n            <meta property=\"og:title\" content={seo.title} />\n            {seo.description && (\n                <meta property=\"og:description\" content={seo.description} />\n            )}\n            {seo.image && <meta property=\"og:image\" content={seo.image} />}\n            {published && (\n                <meta property=\"og:updated_time\" content={published} />\n            )}\n            {article && <meta property=\"og:type\" content=\"article\" />}\n            {published && (\n                <meta property=\"article:published_time\" content={published} />\n            )}\n            {tags &&\n                tags.map((tag, index) => (\n                    <meta key={index} property=\"article:tag\" content={tag} />\n                ))}\n            {/* Twitter */}\n            <meta name=\"twitter:card\" content=\"summary_large_image\" />\n            <meta property=\"twitter:url\" content={seo.url} />\n            {seo.title && <meta name=\"twitter:title\" content={seo.title} />}\n            {seo.description && (\n                <meta name=\"twitter:description\" content={seo.description} />\n            )}\n            {seo.image && <meta name=\"twitter:image\" content={seo.image} />}\n            {twitterUsername && (\n                <meta name=\"twitter:creator\" content={twitterUsername} />\n            )}\n        </Helmet>\n    );\n}\n\nconst query = graphql`\n    query SEO {\n        site {\n            siteMetadata {\n                defaultTitle: title\n                titleTemplate\n                defaultDescription: description\n                siteUrl\n                twitterUsername\n                locale\n                lang\n            }\n        }\n    }\n`;\n","import React from 'react';\nimport { OutboundLink } from 'gatsby-plugin-gtag';\n\nexport default function Icon({\n    children,\n    component: Component = OutboundLink,\n    ...props\n}: any) {\n    return (\n        <Component\n            {...props}\n            className=\"flex-center clickable aspect-square h-10 rounded-full\"\n        >\n            {children}\n        </Component>\n    );\n}\n","import Icon from '../Icon';\nimport Github from '/src/img/github.svg';\nimport Linkedin from '/src/img/linkedin.svg';\nimport Twitter from '/src/img/twitter.svg';\nimport React from 'react';\n\nexport default function Socials() {\n    return (\n        <div\n            className=\"-mx-2 flex space-x-0.5\"\n            role=\"navigation\"\n            aria-label=\"Links\"\n        >\n            <Icon\n                title=\"GitHub\"\n                rel=\"noopener\"\n                href=\"https://github.com/Xammie\"\n            >\n                <Github className=\"h-6\" />\n            </Icon>\n            <Icon\n                title=\"LinkedIn\"\n                rel=\"noopener\"\n                href=\"https://www.linkedin.com/in/maxhoogenbosch/\"\n            >\n                <Linkedin className=\"h-6\" />\n            </Icon>\n            <Icon\n                title=\"Twitter\"\n                rel=\"noopener\"\n                href=\"https://twitter.com/maxhoogenbosch\"\n            >\n                <Twitter className=\"h-6\" />\n            </Icon>\n        </div>\n    );\n}\n","var React = require('react');\n\nfunction Github (props) {\n    return React.createElement(\"svg\",props,React.createElement(\"path\",{\"d\":\"M244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5 21.3 0 42.8 2.9 62.8 8.5 0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8z\",\"fill\":\"currentColor\"}));\n}\n\nGithub.defaultProps = {\"viewBox\":\"0 0 496 512\"};\n\nmodule.exports = Github;\n\nGithub.default = Github;\n","var React = require('react');\n\nfunction Linkedin (props) {\n    return React.createElement(\"svg\",props,React.createElement(\"path\",{\"fill\":\"currentColor\",\"d\":\"M416 32H31.9C14.3 32 0 46.5 0 64.3v383.4C0 465.5 14.3 480 31.9 480H416c17.6 0 32-14.5 32-32.3V64.3c0-17.8-14.4-32.3-32-32.3zM135.4 416H69V202.2h66.5V416zm-33.2-243c-21.3 0-38.5-17.3-38.5-38.5S80.9 96 102.2 96c21.2 0 38.5 17.3 38.5 38.5 0 21.3-17.2 38.5-38.5 38.5zm282.1 243h-66.4V312c0-24.8-.5-56.7-34.5-56.7-34.6 0-39.9 27-39.9 54.9V416h-66.4V202.2h63.7v29.2h.9c8.9-16.8 30.6-34.5 62.9-34.5 67.2 0 79.7 44.3 79.7 101.9V416z\"}));\n}\n\nLinkedin.defaultProps = {\"viewBox\":\"0 0 448 512\"};\n\nmodule.exports = Linkedin;\n\nLinkedin.default = Linkedin;\n","var React = require('react');\n\nfunction Twitter (props) {\n    return React.createElement(\"svg\",props,React.createElement(\"path\",{\"fill\":\"currentColor\",\"d\":\"M459.37 151.716c.325 4.548.325 9.097.325 13.645 0 138.72-105.583 298.558-298.558 298.558-59.452 0-114.68-17.219-161.137-47.106 8.447.974 16.568 1.299 25.34 1.299 49.055 0 94.213-16.568 130.274-44.832-46.132-.975-84.792-31.188-98.112-72.772 6.498.974 12.995 1.624 19.818 1.624 9.421 0 18.843-1.3 27.614-3.573-48.081-9.747-84.143-51.98-84.143-102.985v-1.299c13.969 7.797 30.214 12.67 47.431 13.319-28.264-18.843-46.781-51.005-46.781-87.391 0-19.492 5.197-37.36 14.294-52.954 51.655 63.675 129.3 105.258 216.365 109.807-1.624-7.797-2.599-15.918-2.599-24.04 0-57.828 46.782-104.934 104.934-104.934 30.213 0 57.502 12.67 76.67 33.137 23.715-4.548 46.456-13.32 66.599-25.34-7.798 24.366-24.366 44.833-46.132 57.827 21.117-2.273 41.584-8.122 60.426-16.243-14.292 20.791-32.161 39.308-52.628 54.253z\"}));\n}\n\nTwitter.defaultProps = {\"aria-hidden\":\"true\",\"data-prefix\":\"fab\",\"data-icon\":\"twitter\",\"className\":\"svg-inline--fa fa-twitter fa-w-16\",\"viewBox\":\"0 0 512 512\"};\n\nmodule.exports = Twitter;\n\nTwitter.default = Twitter;\n"],"names":["camelCase","input","options","Array","isArray","TypeError","Object","assign","pascalCase","x","map","trim","filter","length","join","toUpperCase","toLowerCase","string","isLastCharLower","isLastCharUpper","isLastLastCharUpper","i","character","test","slice","preserveCamelCase","replace","_","p1","m","charAt","module","exports","hasOwn","hasOwnProperty","classNames","classes","arguments","arg","argType","push","inner","apply","toString","prototype","includes","key","call","default","undefined","_extends","target","source","_react2","_interopRequireDefault","require","_propTypes2","obj","__esModule","OutboundLink","props","createElement","onClick","e","redirect","button","altKey","ctrlKey","metaKey","shiftKey","defaultPrevented","window","gtag","event_category","event_label","href","transport_type","event_callback","document","location","propTypes","func","height","format","isLoading","isLoaded","images","loading","style","shouldLoad","opacity","placeholder","layout","width","backgroundColor","objectFit","objectPosition","wrapperStyle","position","top","left","bottom","right","transition","sources","fallbackImage","paddingTop","maxWidth","display","React","alt","role","src","a","children","Fragment","Sizer","t","srcSet","decoding","fallback","sizes","Image","media","type","PropTypes","Picture","displayName","isRequired","Placeholder","_Picture$propTypes","propName","componentName","MainImage","rest","image","altValidator","Set","onError","as","className","preactClass","class","onStartLoad","onLoad","overflow","wStyle","wClass","wrapperProps","useRef","useMemo","JSON","stringify","sizer","useEffect","renderImageToStringPromise","import","then","renderImageToString","swapPlaceholderImage","renderImage","root","current","querySelector","ssrImage","hasNativeLazyLoadSupport","complete","wasCached","setTimeout","removeAttribute","addEventListener","removeEventListener","onLoadListener","imageCache","add","cacheKey","has","innerHTML","animationFrame","requestAnimationFrame","cleanupCallback","cancelAnimationFrame","useLayoutEffect","ref","dangerouslySetInnerHTML","__html","suppressHydrationWarning","memo","warn","GatsbyImageHydrator","GatsbyImage","checkDimensionProps","validLayouts","Error","GatsbyImageBrowser","__error","imageData","__imageData","console","StaticImage","Footer","Date","getFullYear","Link","to","Socials","Profile","Seo","title","description","article","published","tags","pathname","useLocation","useStaticQuery","query","site","siteMetadata","defaultTitle","titleTemplate","defaultDescription","siteUrl","twitterUsername","locale","lang","seo","url","Helmet","charSet","name","content","rel","property","tag","index","Icon","component","Component","Github","Linkedin","Twitter","defaultProps"],"sourceRoot":""}